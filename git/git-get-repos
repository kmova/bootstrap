#!/bin/bash
set -e

if [ "$#" -ne 3 ]; then
    echo "Error: Unable to get details of branch. Missing required input."
    echo "Usage: $0 <github org> <type> <page>"
    echo "Example: $0 openebs private 1"
    exit 1
fi

C_GIT_URL=$(echo "https://api.github.com/orgs/$1/repos?type=$2&per_page=100&page=$3")

if [ -z ${GIT_NAME} ];
then
  echo "Error: Environment variable GIT_NAME not found. Please set it to proceed.";
  echo "GIT_NAME should be a valid GitHub username.";
  exit 1
fi

if [ -z ${GIT_TOKEN} ];
then
  echo "Error: Environment variable GIT_TOKEN not found. Please set it to proceed.";
  echo "GIT_TOKEN should be a valid GitHub token associated with GitHub username.";
  echo "GIT_TOKEN should be configured with required permissions to create new release.";
  exit 1
fi

#delete the temporary response file that might 
#have been left around by previous run of the command
#using a fixed name means that this script 
#is not thread safe. only one execution is permitted 
#at a time.
TEMP_RESP_FILE=temp-curl-response.txt
rm -rf ${TEMP_RESP_FILE}

response_code=$(curl -u ${GIT_NAME}:${GIT_TOKEN} \
 -w "%{http_code}" \
 --silent \
 --output ${TEMP_RESP_FILE} \
 --url ${C_GIT_URL} \
 --request GET --header 'content-type: application/json')

#When embedding this script in other scripts like travis, 
#success responses like 200 can mean error. rc_code maps
#the responses to either success (0) or error (1)
rc_code=0

if [ $response_code != "200" ]; then
    echo "Error: Org $1 not found."
else
    echo "Found repos on $1"
fi

#delete the temporary response file
cat ${TEMP_RESP_FILE}
rm -rf ${TEMP_RESP_FILE}

exit ${rc_code}
